using System.Drawing;
using System.IO;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

public class ImageToRgb565Converter
{
    public ushort[] ConvertToRgb565(Bitmap bmp)
    {
        int width = bmp.Width;
        int height = bmp.Height;
        ushort[] rgb565 = new ushort[width * height];
        int idx = 0;
        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                Color c = bmp.GetPixel(x, y);
				ushort value = (ushort)(((c.R & 0xF8) << 8) | ((c.G & 0xFC) << 3) | (c.B >> 3));



				rgb565[idx++] = value;
            }
        }
        return rgb565;
    }

    public void WriteHeaderFile(string outputPath, string arrayName, int width, int height, ushort[] rgb565)
    {
        using var sw = new StreamWriter(outputPath);
        sw.WriteLine($"// Generated by c16bmp");
        sw.WriteLine($"#define {arrayName}_WIDTH {width}");
        sw.WriteLine($"#define {arrayName}_HEIGHT {height}");
        sw.WriteLine($"const uint16_t {arrayName}_data[{width * height}] = {{");
        for (int i = 0; i < rgb565.Length; i++)
        {
            sw.Write($"0x{rgb565[i]:X4}");
            if (i < rgb565.Length - 1) sw.Write(",");
            if ((i + 1) % 16 == 0) sw.WriteLine();
        }
        sw.WriteLine("\n};");
    }

    // RGB565のushort配列から16bpp BMPファイルを出力
    public void WriteRgb565Bmp(string outputPath, int width, int height, ushort[] rgb565)
    {
        // 16bpp RGB565のピクセルデータをバイト配列に変換
        int stride = ((width * 16 + 31) / 32) * 4; // 4byteアライン
        byte[] bmpData = new byte[stride * height];
        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                int idx = y * width + x;
                int offset = y * stride + x * 2;
                bmpData[offset] = (byte)(rgb565[idx] & 0xFF);
                bmpData[offset + 1] = (byte)((rgb565[idx] >> 8) & 0xFF);
            }
        }
        using var fs = new FileStream(outputPath, FileMode.Create, FileAccess.Write);
        // BITMAPFILEHEADER
        fs.Write(new byte[] { 0x42, 0x4D }, 0, 2); // 'BM'
        int fileSize = 14 + 40 + 12 + bmpData.Length;
        fs.Write(BitConverter.GetBytes(fileSize), 0, 4);
        fs.Write(new byte[4], 0, 4); // reserved
        int offsetBits = 14 + 40 + 12;
        fs.Write(BitConverter.GetBytes(offsetBits), 0, 4);
        // BITMAPINFOHEADER
        fs.Write(BitConverter.GetBytes(40), 0, 4); // header size
        fs.Write(BitConverter.GetBytes(width), 0, 4);
        fs.Write(BitConverter.GetBytes(height), 0, 4);
        fs.Write(BitConverter.GetBytes((ushort)1), 0, 2); // planes
        fs.Write(BitConverter.GetBytes((ushort)16), 0, 2); // bit count
        fs.Write(BitConverter.GetBytes(3), 0, 4); // compression=BI_BITFIELDS
        fs.Write(BitConverter.GetBytes(bmpData.Length), 0, 4); // image size
        fs.Write(BitConverter.GetBytes(0), 0, 4); // xppm
        fs.Write(BitConverter.GetBytes(0), 0, 4); // yppm
        fs.Write(BitConverter.GetBytes(0), 0, 4); // clr used
        fs.Write(BitConverter.GetBytes(0), 0, 4); // clr important
        // RGB565マスク
        fs.Write(BitConverter.GetBytes(0xF800), 0, 4); // red mask
        fs.Write(BitConverter.GetBytes(0x07E0), 0, 4); // green mask
        fs.Write(BitConverter.GetBytes(0x001F), 0, 4); // blue mask
        // ピクセルデータ（下から上）
        for (int y = height - 1; y >= 0; y--)
        {
            fs.Write(bmpData, y * stride, stride);
        }
    }
}
